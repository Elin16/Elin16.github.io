{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Yilin's Blog! This blog website contains one list for now. I'll add some more interesting staffs later. List of Class in School This list contains the major class I took in past three years in Fudan University.","title":"HOME"},{"location":"#welcome-to-yilins-blog","text":"This blog website contains one list for now. I'll add some more interesting staffs later.","title":"Welcome to Yilin's Blog!"},{"location":"#list-of-class-in-school","text":"This list contains the major class I took in past three years in Fudan University.","title":"List of Class in School"},{"location":"about/","text":"That's WHY I write this website Build up a blogs for self is one special thing for coders. It's tranditional as well as fashionable. I'd like to write down what I am learning and organise what I've learnt in the world of computer science. I am a junior student now, and it's always not too late to do such meaningful work.","title":"ABOUT"},{"location":"about/#thats-why-i-write-this-website","text":"Build up a blogs for self is one special thing for coders. It's tranditional as well as fashionable. I'd like to write down what I am learning and organise what I've learnt in the world of computer science. I am a junior student now, and it's always not too late to do such meaningful work.","title":"That's WHY I write this website"},{"location":"class-in-school/class-list/","text":"Class List Programe c c++","title":"Class List"},{"location":"class-in-school/class-list/#class-list","text":"","title":"Class List"},{"location":"class-in-school/class-list/#programe","text":"c c++","title":"Programe"},{"location":"class-in-school/major-class/","text":"\u6570\u636e\u5e93\u8bbe\u8ba1\uff0c\u7b97\u6cd5\uff0c\u6570\u636e\u7ed3\u6784\uff0c\u7a0b\u5e8f\u8bbe\u8ba1","title":"Class List2"},{"location":"self-learning/course-list/","text":"My Self-learning Course List To build a strong base to become a good software engineer, these courses are introduced to myself. 1 Algorithm I - Princeton University Acknowlege: cs DIY","title":"Course List"},{"location":"self-learning/course-list/#my-self-learning-course-list","text":"To build a strong base to become a good software engineer, these courses are introduced to myself.","title":"My Self-learning Course List"},{"location":"self-learning/course-list/#1-algorithm-i-princeton-university","text":"Acknowlege: cs DIY","title":"1 Algorithm I - Princeton University"},{"location":"self-learning/%E5%89%91%E6%8C%87OFFER/","text":"\u5251\u6307OFFER \u5178\u578b\u7f16\u7a0b\u9898 \u9605\u8bfb\u7b14\u8bb0 Source \u4f5c\u8005\u53c2\u8003\u4ee3\u7801 \u4e00\u4e9b\u603b\u4f53\u7684\u6307\u5bfc\u539f\u5219 \u4e0d\u4fee\u6539\u8f93\u5165\u6570\u7ec4 > \u4fee\u6539\u8f93\u5165\u7684\u6570\u7ec4 \u6d4b\u8bd5\u7528\u4f8b \u529f\u80fd\u6d4b\u8bd5 \u8fb9\u754c\u503c\u6d4b\u8bd5 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5 null \u4e0d\u5408\u6cd5\u7684\u8f93\u5165 5 \u4f18\u5316\u65f6\u95f4\u548c\u7a7a\u95f4\u6548\u7387 5.2 \u65f6\u95f4\u6548\u7387 \u4e00\u4e9b\u5f71\u54cd\u65f6\u95f4\u6548\u7387\u7684\u7ec6\u8282\uff1a - C/C++\u4e2d\u7684\u5f15\u7528\u4f20\u503cvs\u503c\u8f6c\u9012\uff0c\u540e\u8005\u4ece\u5f62\u53c2\u5230\u5b9e\u53c2\u4f1a\u4ea7\u751f\u4e00\u6b21\u62f7\u8d1d\u64cd\u4f5c\u3002 - \u5faa\u73afvs\u9012\u5f52\uff0c\u9012\u5f52\u66f4\u7b80\u6d01\uff0c\u4f46\u65f6\u95f4\u6548\u7387\u53ef\u80fd\u66f4\u5dee\u3002\u5b9e\u8df5\u4e2d\uff0c\u53ef\u4ee5\u7528\u9012\u5f52\u601d\u8003\u95ee\u9898\uff0c\u7528\u6570\u7ec4\u6765\u4fdd\u5b58\u4e2d\u95f4\u7ed3\u679c\uff0c\u57fa\u4e8e\u5faa\u73af\u5b9e\u73b0\u3002 - \u7b97\u6cd5\uff0c\u6839\u636e\u8f93\u5165\u6570\u636e\u7684\u7279\u70b9\u91c7\u7528\u6700\u5408\u9002\u7684\u7b97\u6cd5\u3002 - \u9762\u8bd5\u65f6\uff0c\u53ef\u4ee5\u5728\u7b2c\u4e00\u65f6\u95f4\u544a\u8bc9\u9762\u8bd5\u5b98\u6700\u76f4\u89c2\u7684\u7b97\u6cd5\uff0c\u7136\u540e\u4e00\u6b65\u6b65\u4f18\u5316\uff0c\u903c\u8fd1\u6700\u4f18\u7b97\u6cd5\uff0c\u5c55\u73b0\u6001\u5ea6\u548c\u6fc0\u60c5\u3002 P25\uff1a\u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 \u8981\u70b9\uff1a - \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8003\u8651\uff1a\u6392\u5e8f\u540e\u641c\u7d22vs\u7edf\u8ba1\u6570\u5b57\u51fa\u73b0\u6b21\u6570 - \u5168\u9762\u6027\uff1a\u7ed9\u5b9a\u7684\u8f93\u5165\u975e\u6cd5\uff0c\u5982\u7a7a\u6307\u9488\u3001\u6570\u7ec4\u957f\u5ea6\u4e3a1\u3001\u4e0d\u5b58\u5728\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 - \u5e94\u8be5\u5199\u4ee3\u7801\u68c0\u67e5\uff0c\u5e76\u89c4\u5b9a\u975e\u6cd5\u60c5\u51b5\u7684\u8fd4\u56de\u503c - \u5f97\u5230\u6570\u7ec4\u4e2d\u4efb\u610f\u7b2ck\u5927\u7684\u6570\u5b57\u7684\u901a\u7528\u7b97\u6cd5 - \u57fa\u4e8e\u5feb\u901f\u6392\u5e8f\u7684partition\u51fd\u6570\u5b9e\u73b0\uff0c\u5f53\u9009\u4e2d\u4e0b\u6807\u4e3ak\u65f6\uff0c\u8be5\u6570\u5373\u4e3a\u7b2ck\u5927\u7684\u6570 - O(n) P41\uff1a\u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570 C++/STL/Vector/Heap [ ] code it P42\uff1a\u8fde\u7eed\u5b50\u6570\u7ec4\u548c\u7684\u6700\u5927\u503c \u6211\u6709\u89e3\u6cd53: \u91c7\u7528\u524d\u7f00\u548c\u5206\u6790\u8fde\u7eed\u5b50\u6570\u7ec4\u548c \u601d\u8def\uff1a\u5982\u679c\u7ed9\u51fa\u6570\u7ec4\u7684\u524d\u7f00\u548c\u6570\u7ec4 prefixSum \uff0c\u5219\u8fde\u7eed\u5b50\u6570\u7ec4 [i, j) \u7684\u548c\u4e3a prefixSum[j] = prefixSum[i] \u3002\u8981\u6c42","title":"\u5251\u6307OFFER \u5178\u578b\u7f16\u7a0b\u9898 \u9605\u8bfb\u7b14\u8bb0"},{"location":"self-learning/%E5%89%91%E6%8C%87OFFER/#offer","text":"","title":"\u5251\u6307OFFER \u5178\u578b\u7f16\u7a0b\u9898 \u9605\u8bfb\u7b14\u8bb0"},{"location":"self-learning/%E5%89%91%E6%8C%87OFFER/#source","text":"\u4f5c\u8005\u53c2\u8003\u4ee3\u7801","title":"Source"},{"location":"self-learning/%E5%89%91%E6%8C%87OFFER/#_1","text":"\u4e0d\u4fee\u6539\u8f93\u5165\u6570\u7ec4 > \u4fee\u6539\u8f93\u5165\u7684\u6570\u7ec4","title":"\u4e00\u4e9b\u603b\u4f53\u7684\u6307\u5bfc\u539f\u5219"},{"location":"self-learning/%E5%89%91%E6%8C%87OFFER/#_2","text":"\u529f\u80fd\u6d4b\u8bd5 \u8fb9\u754c\u503c\u6d4b\u8bd5 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5 null \u4e0d\u5408\u6cd5\u7684\u8f93\u5165","title":"\u6d4b\u8bd5\u7528\u4f8b"},{"location":"self-learning/%E5%89%91%E6%8C%87OFFER/#5","text":"","title":"5 \u4f18\u5316\u65f6\u95f4\u548c\u7a7a\u95f4\u6548\u7387"},{"location":"self-learning/%E5%89%91%E6%8C%87OFFER/#52","text":"\u4e00\u4e9b\u5f71\u54cd\u65f6\u95f4\u6548\u7387\u7684\u7ec6\u8282\uff1a - C/C++\u4e2d\u7684\u5f15\u7528\u4f20\u503cvs\u503c\u8f6c\u9012\uff0c\u540e\u8005\u4ece\u5f62\u53c2\u5230\u5b9e\u53c2\u4f1a\u4ea7\u751f\u4e00\u6b21\u62f7\u8d1d\u64cd\u4f5c\u3002 - \u5faa\u73afvs\u9012\u5f52\uff0c\u9012\u5f52\u66f4\u7b80\u6d01\uff0c\u4f46\u65f6\u95f4\u6548\u7387\u53ef\u80fd\u66f4\u5dee\u3002\u5b9e\u8df5\u4e2d\uff0c\u53ef\u4ee5\u7528\u9012\u5f52\u601d\u8003\u95ee\u9898\uff0c\u7528\u6570\u7ec4\u6765\u4fdd\u5b58\u4e2d\u95f4\u7ed3\u679c\uff0c\u57fa\u4e8e\u5faa\u73af\u5b9e\u73b0\u3002 - \u7b97\u6cd5\uff0c\u6839\u636e\u8f93\u5165\u6570\u636e\u7684\u7279\u70b9\u91c7\u7528\u6700\u5408\u9002\u7684\u7b97\u6cd5\u3002 - \u9762\u8bd5\u65f6\uff0c\u53ef\u4ee5\u5728\u7b2c\u4e00\u65f6\u95f4\u544a\u8bc9\u9762\u8bd5\u5b98\u6700\u76f4\u89c2\u7684\u7b97\u6cd5\uff0c\u7136\u540e\u4e00\u6b65\u6b65\u4f18\u5316\uff0c\u903c\u8fd1\u6700\u4f18\u7b97\u6cd5\uff0c\u5c55\u73b0\u6001\u5ea6\u548c\u6fc0\u60c5\u3002","title":"5.2 \u65f6\u95f4\u6548\u7387"},{"location":"self-learning/%E5%89%91%E6%8C%87OFFER/#p25","text":"\u8981\u70b9\uff1a - \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8003\u8651\uff1a\u6392\u5e8f\u540e\u641c\u7d22vs\u7edf\u8ba1\u6570\u5b57\u51fa\u73b0\u6b21\u6570 - \u5168\u9762\u6027\uff1a\u7ed9\u5b9a\u7684\u8f93\u5165\u975e\u6cd5\uff0c\u5982\u7a7a\u6307\u9488\u3001\u6570\u7ec4\u957f\u5ea6\u4e3a1\u3001\u4e0d\u5b58\u5728\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 - \u5e94\u8be5\u5199\u4ee3\u7801\u68c0\u67e5\uff0c\u5e76\u89c4\u5b9a\u975e\u6cd5\u60c5\u51b5\u7684\u8fd4\u56de\u503c - \u5f97\u5230\u6570\u7ec4\u4e2d\u4efb\u610f\u7b2ck\u5927\u7684\u6570\u5b57\u7684\u901a\u7528\u7b97\u6cd5 - \u57fa\u4e8e\u5feb\u901f\u6392\u5e8f\u7684partition\u51fd\u6570\u5b9e\u73b0\uff0c\u5f53\u9009\u4e2d\u4e0b\u6807\u4e3ak\u65f6\uff0c\u8be5\u6570\u5373\u4e3a\u7b2ck\u5927\u7684\u6570 - O(n)","title":"P25\uff1a\u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57"},{"location":"self-learning/%E5%89%91%E6%8C%87OFFER/#p41","text":"C++/STL/Vector/Heap [ ] code it","title":"P41\uff1a\u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570"},{"location":"self-learning/%E5%89%91%E6%8C%87OFFER/#p42","text":"\u6211\u6709\u89e3\u6cd53: \u91c7\u7528\u524d\u7f00\u548c\u5206\u6790\u8fde\u7eed\u5b50\u6570\u7ec4\u548c \u601d\u8def\uff1a\u5982\u679c\u7ed9\u51fa\u6570\u7ec4\u7684\u524d\u7f00\u548c\u6570\u7ec4 prefixSum \uff0c\u5219\u8fde\u7eed\u5b50\u6570\u7ec4 [i, j) \u7684\u548c\u4e3a prefixSum[j] = prefixSum[i] \u3002\u8981\u6c42","title":"P42\uff1a\u8fde\u7eed\u5b50\u6570\u7ec4\u548c\u7684\u6700\u5927\u503c"},{"location":"self-learning/%E7%AE%97%E6%B3%95%E7%BB%86%E8%8A%82%E5%A4%8D%E4%B9%A0/","text":"\u7b97\u6cd5\u7ec6\u8282\u6574\u7406 \u6392\u5e8f\u7b97\u6cd5","title":"\u7b97\u6cd5\u7ec6\u8282\u6574\u7406"},{"location":"self-learning/%E7%AE%97%E6%B3%95%E7%BB%86%E8%8A%82%E5%A4%8D%E4%B9%A0/#_1","text":"","title":"\u7b97\u6cd5\u7ec6\u8282\u6574\u7406"},{"location":"self-learning/%E7%AE%97%E6%B3%95%E7%BB%86%E8%8A%82%E5%A4%8D%E4%B9%A0/#_2","text":"","title":"\u6392\u5e8f\u7b97\u6cd5"},{"location":"self-learning/Algorithm/Lec1-Intro/","text":"Algorithm Syllabus An introduction to fundamental data types, algorithms, and data structures. Our emphasis is on applications and scientific performance analysis of Java implementations. - Part I focuses on elementary data structures, sorting, and searching. Topics include union\u2212find, binary search, stacks, queues, bags, insertion sort, selection sort, shellsort, quicksort, 3-way quicksort, mergesort, heapsort, binary heaps, binary search trees, red\u2212black trees, separate-chaining and linear-probing hash tables, Graham scan, and kd-trees. Part II focuses on graph and string-processing algorithms. Topics include depth-first search, breadth-first search, topological sort, Kosaraju\u2212Sharir, Kruskal, Prim, Dijkistra, Bellman\u2212Ford, Ford\u2212Fulkerson, LSD radix sort, MSD radix sort, 3-way radix quicksort, multiway tries, ternary search tries, Knuth\u2212Morris\u2212Pratt, Boyer\u2212Moore, Rabin\u2013Karp, regular expression matching, run-length coding, Huffman coding, LZW compression and Burrows\u2212Wheeler transform. Part II also introduces reductions and intractability, including the P = NP problem. Ideas Algorithm: method for solving a problem. Data structure: method to store information. \u201c Algorithms + Data Structures = Programs. \u201d \u2014 Niklaus Wirth","title":"Introduction"},{"location":"self-learning/Algorithm/Lec1-Intro/#algorithm","text":"","title":"Algorithm"},{"location":"self-learning/Algorithm/Lec1-Intro/#syllabus","text":"An introduction to fundamental data types, algorithms, and data structures. Our emphasis is on applications and scientific performance analysis of Java implementations. - Part I focuses on elementary data structures, sorting, and searching. Topics include union\u2212find, binary search, stacks, queues, bags, insertion sort, selection sort, shellsort, quicksort, 3-way quicksort, mergesort, heapsort, binary heaps, binary search trees, red\u2212black trees, separate-chaining and linear-probing hash tables, Graham scan, and kd-trees. Part II focuses on graph and string-processing algorithms. Topics include depth-first search, breadth-first search, topological sort, Kosaraju\u2212Sharir, Kruskal, Prim, Dijkistra, Bellman\u2212Ford, Ford\u2212Fulkerson, LSD radix sort, MSD radix sort, 3-way radix quicksort, multiway tries, ternary search tries, Knuth\u2212Morris\u2212Pratt, Boyer\u2212Moore, Rabin\u2013Karp, regular expression matching, run-length coding, Huffman coding, LZW compression and Burrows\u2212Wheeler transform. Part II also introduces reductions and intractability, including the P = NP problem.","title":"Syllabus"},{"location":"self-learning/Algorithm/Lec1-Intro/#ideas","text":"Algorithm: method for solving a problem. Data structure: method to store information. \u201c Algorithms + Data Structures = Programs. \u201d \u2014 Niklaus Wirth","title":"Ideas"},{"location":"self-learning/Algorithm/Lec2-Union-Find/","text":"Algorithm Class Note Steps to developing a usable algorithm. - Model the problem. - Find an algorithm to solve it. - Fast enough? Fits in memory? - If not, figure out why. - Find a way to address the problem. - Iterate until satisfied 1.5 Union Find Problem Given a set of N objects. - Union command: connect tow objects - Find/connected query: is there a oath connecting the tow objects? Model Mapping the objects 0 to N-1 Use integers as array index. Suppress details not relevant to union-find Assume \"is connected to\" is an equivalence relation: the relation of connected satisfies is Reflecive, Symmetric and Transitive. Connected components. Maximal set of objects that are mutually connected. public class UF UF(int N) //initialize union-find data structure with N objects (0 to N \u2013 1) void union(int p, int q) //add connection between p and q boolean connected(int p, int q) // are p and q in the same component? int find(int p) //component identifier for p (0 to N \u2013 1) int count() //number of components Algorithm 1 Quick-find [eager approach] Data structure. Integer array id[] of length N. Interpretation: p and q are connected iff they have the same id. Find. Check if p and q have the same id. Union. To merge components containing p and q, change all entries whose id equals id[p] to id[q]. Implementation Initialize O(n) id[i] = i Union p, q O(n) set all id[i] == id[p] to id[q] IsUnion O(1) Drawbacks Too slow. If these are N union operation, it costs $N^2$ time to run. Quadratic time is much to slow. 2 Quick-union [lazy approach] Data structure. Integer array id[] of length N. Interpretation: id[i] is parent of i. Root of i is id[id[id[...id[i]...]]]: keep going until it doesn\u2019t change(algorithm ensures no cycles) Find O(N) Check if p and q have the same root. Union O(N) To merge components containing p and q, set the id of p's root to the id of q's root. Defect Trees can get tall so that each time we costs O(N) to find root. Improvement 1: weighting Weighted quick-union. Modify quick-union to avoid tall trees. Keep track of size of each tree (number of objects). Balance by linking root of smaller tree to root of larger tree. Implement Maintain a size[] array to record each tree's size Initialize it with size[i] = 1 Consolt and Update size[] when union operation Running time. Find: takes time proportional to depth of p and q. $O(lg(N^+))$ Union: takes constant time, given roots. $O(lg(N^+))$ By limiting the depth of trees, the time of find root reduced from $O(N)$ to $O(lg(N^+))$ Proposition. Depth of any node x is at most $lg N$. Pf. When does depth of x increase? Increases by 1 when tree T1 containing x is merged into another tree T2. The size of the tree containing x at least doubles since $| T 2 | \u2265 | T 1 |$. Size of tree containing x can double at most lg N times. For $ N = 2^(lgN)$ Comparision of $N$ and $lgN$ $N$ $lgN$ 1 0 1 thousand 10 1 million 20 1 billion 30 iterate log function $lg^{*} N$ is the number of times the logarithm function must be iteratively applied before the result is less than or equal to 1. Improvement 2: path compressing Impletation Add an extra loop to renew the root. Or set id[i] = id[id[i]]. The last one is simple and good enough in pratice. Even though it may encounter N depth situation. Proposition. [Hopcroft-Ulman, Tarjan] Starting from an empty data structure, any sequence of M union-find ops on N objects makes \u2264 $c ( N + M lg^* N )$ array accesses. Amazing fact. [Fredman-Saks] No linear-time algorithm exists. Ex. [$10^9$ unions and finds with $10^9$ objects] WQUPC (Weighted Quick-Union with Path Compression) reduces time from 30 years to 6 seconds. Supercomputer won't help much; good algorithm enables solution. Application Monte Carlo simulation TO find percolation possibility Create virtual sites which presents top and bottom [So smart!] Remain Problem: how to tell the full sites from site? Answer: if the neightbor is full, full it!","title":"Union Find"},{"location":"self-learning/Algorithm/Lec2-Union-Find/#algorithm-class-note","text":"Steps to developing a usable algorithm. - Model the problem. - Find an algorithm to solve it. - Fast enough? Fits in memory? - If not, figure out why. - Find a way to address the problem. - Iterate until satisfied","title":"Algorithm Class Note"},{"location":"self-learning/Algorithm/Lec2-Union-Find/#15-union-find","text":"","title":"1.5 Union Find"},{"location":"self-learning/Algorithm/Lec2-Union-Find/#problem","text":"Given a set of N objects. - Union command: connect tow objects - Find/connected query: is there a oath connecting the tow objects?","title":"Problem"},{"location":"self-learning/Algorithm/Lec2-Union-Find/#model","text":"Mapping the objects 0 to N-1 Use integers as array index. Suppress details not relevant to union-find Assume \"is connected to\" is an equivalence relation: the relation of connected satisfies is Reflecive, Symmetric and Transitive. Connected components. Maximal set of objects that are mutually connected. public class UF UF(int N) //initialize union-find data structure with N objects (0 to N \u2013 1) void union(int p, int q) //add connection between p and q boolean connected(int p, int q) // are p and q in the same component? int find(int p) //component identifier for p (0 to N \u2013 1) int count() //number of components","title":"Model"},{"location":"self-learning/Algorithm/Lec2-Union-Find/#algorithm","text":"","title":"Algorithm"},{"location":"self-learning/Algorithm/Lec2-Union-Find/#1-quick-find-eager-approach","text":"Data structure. Integer array id[] of length N. Interpretation: p and q are connected iff they have the same id. Find. Check if p and q have the same id. Union. To merge components containing p and q, change all entries whose id equals id[p] to id[q]. Implementation Initialize O(n) id[i] = i Union p, q O(n) set all id[i] == id[p] to id[q] IsUnion O(1) Drawbacks Too slow. If these are N union operation, it costs $N^2$ time to run. Quadratic time is much to slow.","title":"1 Quick-find [eager approach]"},{"location":"self-learning/Algorithm/Lec2-Union-Find/#2-quick-union-lazy-approach","text":"Data structure. Integer array id[] of length N. Interpretation: id[i] is parent of i. Root of i is id[id[id[...id[i]...]]]: keep going until it doesn\u2019t change(algorithm ensures no cycles) Find O(N) Check if p and q have the same root. Union O(N) To merge components containing p and q, set the id of p's root to the id of q's root. Defect Trees can get tall so that each time we costs O(N) to find root.","title":"2 Quick-union [lazy approach]"},{"location":"self-learning/Algorithm/Lec2-Union-Find/#improvement-1-weighting","text":"Weighted quick-union. Modify quick-union to avoid tall trees. Keep track of size of each tree (number of objects). Balance by linking root of smaller tree to root of larger tree. Implement Maintain a size[] array to record each tree's size Initialize it with size[i] = 1 Consolt and Update size[] when union operation Running time. Find: takes time proportional to depth of p and q. $O(lg(N^+))$ Union: takes constant time, given roots. $O(lg(N^+))$ By limiting the depth of trees, the time of find root reduced from $O(N)$ to $O(lg(N^+))$ Proposition. Depth of any node x is at most $lg N$. Pf. When does depth of x increase? Increases by 1 when tree T1 containing x is merged into another tree T2. The size of the tree containing x at least doubles since $| T 2 | \u2265 | T 1 |$. Size of tree containing x can double at most lg N times. For $ N = 2^(lgN)$ Comparision of $N$ and $lgN$ $N$ $lgN$ 1 0 1 thousand 10 1 million 20 1 billion 30 iterate log function $lg^{*} N$ is the number of times the logarithm function must be iteratively applied before the result is less than or equal to 1.","title":"Improvement 1: weighting"},{"location":"self-learning/Algorithm/Lec2-Union-Find/#improvement-2-path-compressing","text":"Impletation Add an extra loop to renew the root. Or set id[i] = id[id[i]]. The last one is simple and good enough in pratice. Even though it may encounter N depth situation. Proposition. [Hopcroft-Ulman, Tarjan] Starting from an empty data structure, any sequence of M union-find ops on N objects makes \u2264 $c ( N + M lg^* N )$ array accesses. Amazing fact. [Fredman-Saks] No linear-time algorithm exists. Ex. [$10^9$ unions and finds with $10^9$ objects] WQUPC (Weighted Quick-Union with Path Compression) reduces time from 30 years to 6 seconds. Supercomputer won't help much; good algorithm enables solution.","title":"Improvement 2: path compressing"},{"location":"self-learning/Algorithm/Lec2-Union-Find/#application","text":"Monte Carlo simulation TO find percolation possibility Create virtual sites which presents top and bottom [So smart!] Remain Problem: how to tell the full sites from site? Answer: if the neightbor is full, full it!","title":"Application"},{"location":"self-learning/Algorithm/Lec3-Algorithm/","text":"Algorithm Class Note 1.4 ANALYSIS OF ALGORITHMS Introduction Scientific method applied to analysis of algorithms Scientific method Observe some feature of the natural world. \u89c2\u5bdf Hypothesize a model that is consistent with the observations. \u5047\u8bbe Predict events using the hypothesis. \u5229\u7528\u5047\u8bbe\u9884\u6d4b Verify the predictions by making further observations. \u6839\u636e\u66f4\u591a\u7684\u89c2\u5bdf\u9a8c\u8bc1\u5047\u8bbe Validate by repeating until the hypothesis and observations agree. \u5982\u6b64\u8fed\u4ee3\u76f4\u5230\u5047\u8bbe\u4e0e\u89c2\u5bdf\u76f8\u4e00\u81f4 Principles. Experiments must be reproducible. \u5b9e\u9a8c\u53ef\u518d\u73b0 Hypotheses must be falsifiable. \u5047\u8bbe\u53ef\u8bc1\u4f2a Observations power law aN^b \u5e42\u5b9a\u5f8b Data analysis Standard plot. Plot running time T (N) vs. input size N Log-log plot. Plot running time T (N) vs. input size N using log-log scale Do log-log plot to see if the complex is a*N^b (which will turn a straight line) Prediction and validation Doubling hypothesis. Quick way to estimate b in a power-law relationship. Run program, doubling the size of the input How to estimate a in a power-law relationship? Run sufficient large value of N System independent effects. determines exponent b in power law Algorithm. Input data. System dependent effects. determines constant a in power law Hardware: CPU, memory, cache, \u2026 Software: compiler, interpreter, garbage collector, \u2026 System: operating system, network, other apps, \u2026 Mathematical Models","title":"Algorithm Class Note"},{"location":"self-learning/Algorithm/Lec3-Algorithm/#algorithm-class-note","text":"","title":"Algorithm Class Note"},{"location":"self-learning/Algorithm/Lec3-Algorithm/#14-analysis-of-algorithms","text":"","title":"1.4 ANALYSIS OF ALGORITHMS"},{"location":"self-learning/Algorithm/Lec3-Algorithm/#introduction","text":"","title":"Introduction"},{"location":"self-learning/Algorithm/Lec3-Algorithm/#scientific-method-applied-to-analysis-of-algorithms","text":"Scientific method Observe some feature of the natural world. \u89c2\u5bdf Hypothesize a model that is consistent with the observations. \u5047\u8bbe Predict events using the hypothesis. \u5229\u7528\u5047\u8bbe\u9884\u6d4b Verify the predictions by making further observations. \u6839\u636e\u66f4\u591a\u7684\u89c2\u5bdf\u9a8c\u8bc1\u5047\u8bbe Validate by repeating until the hypothesis and observations agree. \u5982\u6b64\u8fed\u4ee3\u76f4\u5230\u5047\u8bbe\u4e0e\u89c2\u5bdf\u76f8\u4e00\u81f4 Principles. Experiments must be reproducible. \u5b9e\u9a8c\u53ef\u518d\u73b0 Hypotheses must be falsifiable. \u5047\u8bbe\u53ef\u8bc1\u4f2a","title":"Scientific method applied to analysis of algorithms"},{"location":"self-learning/Algorithm/Lec3-Algorithm/#observations","text":"power law aN^b \u5e42\u5b9a\u5f8b Data analysis Standard plot. Plot running time T (N) vs. input size N Log-log plot. Plot running time T (N) vs. input size N using log-log scale Do log-log plot to see if the complex is a*N^b (which will turn a straight line) Prediction and validation Doubling hypothesis. Quick way to estimate b in a power-law relationship. Run program, doubling the size of the input How to estimate a in a power-law relationship? Run sufficient large value of N System independent effects. determines exponent b in power law Algorithm. Input data. System dependent effects. determines constant a in power law Hardware: CPU, memory, cache, \u2026 Software: compiler, interpreter, garbage collector, \u2026 System: operating system, network, other apps, \u2026","title":"Observations"},{"location":"self-learning/Algorithm/Lec3-Algorithm/#mathematical-models","text":"","title":"Mathematical Models"},{"location":"software-engineering/what-is-se/","text":"What is software engineering I find a good, full description of software engineering and engineer in coursera .","title":"What is software engineering"},{"location":"software-engineering/what-is-se/#what-is-software-engineering","text":"I find a good, full description of software engineering and engineer in coursera .","title":"What is software engineering"}]}