{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Yilin's Blog! This blog website contains one list for now. I'll add some more interesting staffs later. List of Class in School This list contains the major class I took in past three years in Fudan University.","title":"HOME"},{"location":"#welcome-to-yilins-blog","text":"This blog website contains one list for now. I'll add some more interesting staffs later.","title":"Welcome to Yilin's Blog!"},{"location":"#list-of-class-in-school","text":"This list contains the major class I took in past three years in Fudan University.","title":"List of Class in School"},{"location":"about/","text":"That's WHY I write this website Build up a blogs for self is one special thing for coders. It's tranditional as well as fashionable. I'd like to write down what I am learning and organise what I've learnt in the world of computer science. I am a junior student now, and it's always not too late to do such meaningful work.","title":"ABOUT"},{"location":"about/#thats-why-i-write-this-website","text":"Build up a blogs for self is one special thing for coders. It's tranditional as well as fashionable. I'd like to write down what I am learning and organise what I've learnt in the world of computer science. I am a junior student now, and it's always not too late to do such meaningful work.","title":"That's WHY I write this website"},{"location":"class-in-school/class-list/","text":"Class List Programe c c++","title":"Class List"},{"location":"class-in-school/class-list/#class-list","text":"","title":"Class List"},{"location":"class-in-school/class-list/#programe","text":"c c++","title":"Programe"},{"location":"class-in-school/major-class/","text":"\u6570\u636e\u5e93\u8bbe\u8ba1\uff0c\u7b97\u6cd5\uff0c\u6570\u636e\u7ed3\u6784\uff0c\u7a0b\u5e8f\u8bbe\u8ba1","title":"Class List2"},{"location":"self-learning/course-list/","text":"My Self-learning Course List To build a strong base to become a good software engineer, these courses are introduced to myself. 1 Algorithm I - Princeton University Acknowlege: cs DIY","title":"Course List"},{"location":"self-learning/course-list/#my-self-learning-course-list","text":"To build a strong base to become a good software engineer, these courses are introduced to myself.","title":"My Self-learning Course List"},{"location":"self-learning/course-list/#1-algorithm-i-princeton-university","text":"Acknowlege: cs DIY","title":"1 Algorithm I - Princeton University"},{"location":"self-learning/Algorithm/Lec1-Intro/","text":"Algorithm Syllabus An introduction to fundamental data types, algorithms, and data structures. Our emphasis is on applications and scientific performance analysis of Java implementations. - Part I focuses on elementary data structures, sorting, and searching. Topics include union\u2212find, binary search, stacks, queues, bags, insertion sort, selection sort, shellsort, quicksort, 3-way quicksort, mergesort, heapsort, binary heaps, binary search trees, red\u2212black trees, separate-chaining and linear-probing hash tables, Graham scan, and kd-trees. Part II focuses on graph and string-processing algorithms. Topics include depth-first search, breadth-first search, topological sort, Kosaraju\u2212Sharir, Kruskal, Prim, Dijkistra, Bellman\u2212Ford, Ford\u2212Fulkerson, LSD radix sort, MSD radix sort, 3-way radix quicksort, multiway tries, ternary search tries, Knuth\u2212Morris\u2212Pratt, Boyer\u2212Moore, Rabin\u2013Karp, regular expression matching, run-length coding, Huffman coding, LZW compression and Burrows\u2212Wheeler transform. Part II also introduces reductions and intractability, including the P = NP problem. Ideas Algorithm: method for solving a problem. Data structure: method to store information. \u201c Algorithms + Data Structures = Programs. \u201d \u2014 Niklaus Wirth","title":"Introduction"},{"location":"self-learning/Algorithm/Lec1-Intro/#algorithm","text":"","title":"Algorithm"},{"location":"self-learning/Algorithm/Lec1-Intro/#syllabus","text":"An introduction to fundamental data types, algorithms, and data structures. Our emphasis is on applications and scientific performance analysis of Java implementations. - Part I focuses on elementary data structures, sorting, and searching. Topics include union\u2212find, binary search, stacks, queues, bags, insertion sort, selection sort, shellsort, quicksort, 3-way quicksort, mergesort, heapsort, binary heaps, binary search trees, red\u2212black trees, separate-chaining and linear-probing hash tables, Graham scan, and kd-trees. Part II focuses on graph and string-processing algorithms. Topics include depth-first search, breadth-first search, topological sort, Kosaraju\u2212Sharir, Kruskal, Prim, Dijkistra, Bellman\u2212Ford, Ford\u2212Fulkerson, LSD radix sort, MSD radix sort, 3-way radix quicksort, multiway tries, ternary search tries, Knuth\u2212Morris\u2212Pratt, Boyer\u2212Moore, Rabin\u2013Karp, regular expression matching, run-length coding, Huffman coding, LZW compression and Burrows\u2212Wheeler transform. Part II also introduces reductions and intractability, including the P = NP problem.","title":"Syllabus"},{"location":"self-learning/Algorithm/Lec1-Intro/#ideas","text":"Algorithm: method for solving a problem. Data structure: method to store information. \u201c Algorithms + Data Structures = Programs. \u201d \u2014 Niklaus Wirth","title":"Ideas"},{"location":"self-learning/Algorithm/Lec2-Union-Find/","text":"Algorithm Class Note Steps to developing a usable algorithm. - Model the problem. - Find an algorithm to solve it. - Fast enough? Fits in memory? - If not, figure out why. - Find a way to address the problem. - Iterate until satisfied 1.5 Union Find Problem Given a set of N objects. - Union command: connect tow objects - Find/connected query: is there a oath connecting the tow objects? Model Mapping the objects 0 to N-1 Use integers as array index. Suppress details not relevant to union-find Assume \"is connected to\" is an equivalence relation: the relation of connected satisfies is Reflecive, Symmetric and Transitive. Connected components. Maximal set of objects that are mutually connected. public class UF UF(int N) //initialize union-find data structure with N objects (0 to N \u2013 1) void union(int p, int q) //add connection between p and q boolean connected(int p, int q) // are p and q in the same component? int find(int p) //component identifier for p (0 to N \u2013 1) int count() //number of components Algorithm 1 Quick-find [eager approach] Data structure. Integer array id[] of length N. Interpretation: p and q are connected iff they have the same id. Find. Check if p and q have the same id. Union. To merge components containing p and q, change all entries whose id equals id[p] to id[q]. Implementation Initialize O(n) id[i] = i Union p, q O(n) set all id[i] == id[p] to id[q] IsUnion O(1) Drawbacks Too slow. If these are N union operation, it costs $N^2$ time to run. Quadratic time is much to slow. 2 Quick-union [lazy approach] Data structure. Integer array id[] of length N. Interpretation: id[i] is parent of i. Root of i is id[id[id[...id[i]...]]]: keep going until it doesn\u2019t change(algorithm ensures no cycles) Find O(N) Check if p and q have the same root. Union O(N) To merge components containing p and q, set the id of p's root to the id of q's root. Defect Trees can get tall so that each time we costs O(N) to find root. Improvement 1: weighting Weighted quick-union. Modify quick-union to avoid tall trees. Keep track of size of each tree (number of objects). Balance by linking root of smaller tree to root of larger tree. Implement Maintain a size[] array to record each tree's size Initialize it with size[i] = 1 Consolt and Update size[] when union operation Running time. Find: takes time proportional to depth of p and q. $O(lg(N^+))$ Union: takes constant time, given roots. $O(lg(N^+))$ By limiting the depth of trees, the time of find root reduced from $O(N)$ to $O(lg(N^+))$ Proposition. Depth of any node x is at most $lg N$. Pf. When does depth of x increase? Increases by 1 when tree T1 containing x is merged into another tree T2. The size of the tree containing x at least doubles since $| T 2 | \u2265 | T 1 |$. Size of tree containing x can double at most lg N times. For $ N = 2^(lgN)$ Comparision of $N$ and $lgN$ $N$ | $lgN$ -- | -- | 1 | 0 | | 1 thousand | 10| | 1 million | 20 | | 1 billion | 30 | iterate log function $lg^{*} N$ is the number of times the logarithm function must be iteratively applied before the result is less than or equal to 1. Improvement 2: path compressing Impletation Add an extra loop to renew the root. Or set id[i] = id[id[i]]. The last one is simple and good enough in pratice. Even though it may encounter N depth situation. Proposition. [Hopcroft-Ulman, Tarjan] Starting from an empty data structure, any sequence of M union-find ops on N objects makes \u2264 $c ( N + M lg^* N )$ array accesses. Amazing fact. [Fredman-Saks] No linear-time algorithm exists. Ex. [$10^9$ unions and finds with $10^9$ objects] WQUPC (Weighted Quick-Union with Path Compression) reduces time from 30 years to 6 seconds. Supercomputer won't help much; good algorithm enables solution. Application Monte Carlo simulation TO find percolation possibility Create virtual sites which presents top and bottom [So smart!] Remain Problem: how to tell the full sites from site? Answer: if the neightbor is full, full it!","title":"Union Find"},{"location":"self-learning/Algorithm/Lec2-Union-Find/#algorithm-class-note","text":"Steps to developing a usable algorithm. - Model the problem. - Find an algorithm to solve it. - Fast enough? Fits in memory? - If not, figure out why. - Find a way to address the problem. - Iterate until satisfied","title":"Algorithm Class Note"},{"location":"self-learning/Algorithm/Lec2-Union-Find/#15-union-find","text":"","title":"1.5 Union Find"},{"location":"self-learning/Algorithm/Lec2-Union-Find/#problem","text":"Given a set of N objects. - Union command: connect tow objects - Find/connected query: is there a oath connecting the tow objects?","title":"Problem"},{"location":"self-learning/Algorithm/Lec2-Union-Find/#model","text":"Mapping the objects 0 to N-1 Use integers as array index. Suppress details not relevant to union-find Assume \"is connected to\" is an equivalence relation: the relation of connected satisfies is Reflecive, Symmetric and Transitive. Connected components. Maximal set of objects that are mutually connected. public class UF UF(int N) //initialize union-find data structure with N objects (0 to N \u2013 1) void union(int p, int q) //add connection between p and q boolean connected(int p, int q) // are p and q in the same component? int find(int p) //component identifier for p (0 to N \u2013 1) int count() //number of components","title":"Model"},{"location":"self-learning/Algorithm/Lec2-Union-Find/#algorithm","text":"","title":"Algorithm"},{"location":"self-learning/Algorithm/Lec2-Union-Find/#1-quick-find-eager-approach","text":"Data structure. Integer array id[] of length N. Interpretation: p and q are connected iff they have the same id. Find. Check if p and q have the same id. Union. To merge components containing p and q, change all entries whose id equals id[p] to id[q]. Implementation Initialize O(n) id[i] = i Union p, q O(n) set all id[i] == id[p] to id[q] IsUnion O(1) Drawbacks Too slow. If these are N union operation, it costs $N^2$ time to run. Quadratic time is much to slow.","title":"1 Quick-find [eager approach]"},{"location":"self-learning/Algorithm/Lec2-Union-Find/#2-quick-union-lazy-approach","text":"Data structure. Integer array id[] of length N. Interpretation: id[i] is parent of i. Root of i is id[id[id[...id[i]...]]]: keep going until it doesn\u2019t change(algorithm ensures no cycles) Find O(N) Check if p and q have the same root. Union O(N) To merge components containing p and q, set the id of p's root to the id of q's root. Defect Trees can get tall so that each time we costs O(N) to find root.","title":"2 Quick-union [lazy approach]"},{"location":"self-learning/Algorithm/Lec2-Union-Find/#improvement-1-weighting","text":"Weighted quick-union. Modify quick-union to avoid tall trees. Keep track of size of each tree (number of objects). Balance by linking root of smaller tree to root of larger tree. Implement Maintain a size[] array to record each tree's size Initialize it with size[i] = 1 Consolt and Update size[] when union operation Running time. Find: takes time proportional to depth of p and q. $O(lg(N^+))$ Union: takes constant time, given roots. $O(lg(N^+))$ By limiting the depth of trees, the time of find root reduced from $O(N)$ to $O(lg(N^+))$ Proposition. Depth of any node x is at most $lg N$. Pf. When does depth of x increase? Increases by 1 when tree T1 containing x is merged into another tree T2. The size of the tree containing x at least doubles since $| T 2 | \u2265 | T 1 |$. Size of tree containing x can double at most lg N times. For $ N = 2^(lgN)$ Comparision of $N$ and $lgN$ $N$ | $lgN$ -- | -- | 1 | 0 | | 1 thousand | 10| | 1 million | 20 | | 1 billion | 30 | iterate log function $lg^{*} N$ is the number of times the logarithm function must be iteratively applied before the result is less than or equal to 1.","title":"Improvement 1: weighting"},{"location":"self-learning/Algorithm/Lec2-Union-Find/#improvement-2-path-compressing","text":"Impletation Add an extra loop to renew the root. Or set id[i] = id[id[i]]. The last one is simple and good enough in pratice. Even though it may encounter N depth situation. Proposition. [Hopcroft-Ulman, Tarjan] Starting from an empty data structure, any sequence of M union-find ops on N objects makes \u2264 $c ( N + M lg^* N )$ array accesses. Amazing fact. [Fredman-Saks] No linear-time algorithm exists. Ex. [$10^9$ unions and finds with $10^9$ objects] WQUPC (Weighted Quick-Union with Path Compression) reduces time from 30 years to 6 seconds. Supercomputer won't help much; good algorithm enables solution.","title":"Improvement 2: path compressing"},{"location":"self-learning/Algorithm/Lec2-Union-Find/#application","text":"Monte Carlo simulation TO find percolation possibility Create virtual sites which presents top and bottom [So smart!] Remain Problem: how to tell the full sites from site? Answer: if the neightbor is full, full it!","title":"Application"},{"location":"software-engineering/what-is-se/","text":"What is software engineering I find a good, full description of software engineering and engineer in coursera .","title":"What is software engineering"},{"location":"software-engineering/what-is-se/#what-is-software-engineering","text":"I find a good, full description of software engineering and engineer in coursera .","title":"What is software engineering"}]}